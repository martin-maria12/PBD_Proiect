-- Generated by Oracle SQL Developer Data Modeler 23.1.0.087.0806
--   at:        2024-05-25 17:00:34 EEST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE OR REPLACE PACKAGE cursor_pkg AS 
    PROCEDURE verifica_imprumuturi_si_actualizeaza;
END;
/

CREATE OR REPLACE PACKAGE delete_pkg AS 
    PROCEDURE delete_bibliotecar(
        p_id_bibliotecar   IN bibliotecari.id_bibliotecar%TYPE,
        p_ok          IN BOOLEAN DEFAULT FALSE
    );

    PROCEDURE delete_carte(
        p_id_carte         IN carti.id_carte%TYPE,
        p_ok          IN BOOLEAN DEFAULT FALSE
    );

    PROCEDURE delete_detalii_carte(
        p_id_detalii       IN detalii_carte.id_detalii%TYPE
    );

    PROCEDURE delete_membru(
        p_id_membru        IN membri.id_membru%TYPE,
        p_ok          IN BOOLEAN DEFAULT FALSE
    );

    PROCEDURE delete_imprumut(
        p_id_imprumut      IN imprumuturi.id_imprumut%TYPE
    );
END;
/

CREATE OR REPLACE PACKAGE insert_pkg AS 
    FUNCTION adauga_carte(
        p_id_carte     IN INTEGER,
        p_status_carte IN CHAR
    ) RETURN VARCHAR2;
    
    FUNCTION adauga_detalii_carte(
        p_id_detalii      IN INTEGER,
        p_carti_id_carte  IN INTEGER,
        p_titlu_carte     IN VARCHAR2,
        p_autor_carte     IN VARCHAR2,
        p_gen_carte       IN VARCHAR2,
        p_data_publicarii IN DATE
    ) RETURN VARCHAR2;
    
    FUNCTION adauga_membru(
        p_id_membru   IN INTEGER,
        p_nume_membru IN VARCHAR2,
        p_adresa      IN VARCHAR2,
        p_telefon     IN VARCHAR2,
        p_email       IN VARCHAR2,
        p_cnp_membru  IN VARCHAR2
    ) RETURN VARCHAR2;
    
    FUNCTION adauga_bibliotecar(
        p_id_bibliotecar   IN INTEGER,
        p_nume_bibliotecar IN VARCHAR2
    ) RETURN VARCHAR2;
    
    FUNCTION adauga_imprumut(
        p_id_imprumut                 IN INTEGER,
        p_carti_id_carte              IN INTEGER,
        p_membri_id_membru            IN INTEGER,
        p_data_imprumut               IN DATE,
        p_data_returnare              IN DATE,
        p_bibliotecari_id_bibliotecar IN INTEGER
    ) RETURN VARCHAR2;
END;
/

CREATE OR REPLACE PACKAGE update_pkg AS 
    PROCEDURE update_bibliotecar(
        p_id_bibliotecar   IN bibliotecari.id_bibliotecar%TYPE,
        p_nume_bibliotecar IN bibliotecari.nume_bibliotecar%TYPE
    );

    PROCEDURE update_carte(
        p_id_carte     IN carti.id_carte%TYPE,
        p_status_carte IN carti.status_carte%TYPE
    );

    PROCEDURE update_detalii_carte(
        p_id_detalii      IN detalii_carte.id_detalii%TYPE,
        p_titlu_carte     IN detalii_carte.titlu_carte%TYPE,
        p_autor_carte     IN detalii_carte.autor_carte%TYPE,
        p_gen_carte       IN detalii_carte.gen_carte%TYPE,
        p_data_publicarii IN detalii_carte.data_publicarii%TYPE
    );

    PROCEDURE update_membru(
        p_id_membru   IN membri.id_membru%TYPE,
        p_nume_membru IN membri.nume_membru%TYPE,
        p_adresa      IN membri.adresa%TYPE,
        p_telefon     IN membri.telefon%TYPE,
        p_email       IN membri.email%TYPE,
        p_cnp_membru  IN membri.cnp_membru%TYPE
    );

    PROCEDURE update_imprumut(
        p_id_imprumut                 IN imprumuturi.id_imprumut%TYPE,
        p_carti_id_carte              IN imprumuturi.carti_id_carte%TYPE,
        p_membri_id_membru            IN imprumuturi.membri_id_membru%TYPE,
        p_data_imprumut               IN imprumuturi.data_imprumut%TYPE,
        p_data_returnare              IN imprumuturi.data_returnare%TYPE,
        p_bibliotecari_id_bibliotecar IN imprumuturi.bibliotecari_id_bibliotecar%TYPE
    );
END;
/

CREATE OR REPLACE PACKAGE view_pkg AS 
    PROCEDURE view_imprumuturi_by_membru(
        p_id_membru IN membri.id_membru%TYPE
    );
    
    PROCEDURE view_imprumuturi_by_carte(
        p_id_carte IN carti.id_carte%TYPE
    );
    
    PROCEDURE view_detalii_carte_by_carte(
        p_id_carte IN carti.id_carte%TYPE
    );
    
    PROCEDURE view_imprumuturi_by_bibliotecar(
        p_id_bibliotecar IN bibliotecari.id_bibliotecar%TYPE
    );
END;
/

CREATE TABLE detalii_carte (
    id_detalii      INTEGER NOT NULL,
    carti_id_carte  INTEGER NOT NULL,
    titlu_carte     VARCHAR2(255),
    autor_carte     VARCHAR2(255),
    gen_carte       VARCHAR2(255),
    data_publicarii DATE
)
LOGGING;

CREATE UNIQUE INDEX detalii_carte__idx ON
    detalii_carte (
        carti_id_carte
    ASC )
        LOGGING;

ALTER TABLE detalii_carte ADD CONSTRAINT detalii_carte_pk PRIMARY KEY ( id_detalii );

CREATE TABLE carti (
    id_carte     INTEGER NOT NULL,
    status_carte CHAR(1)
)
LOGGING;

ALTER TABLE carti ADD CONSTRAINT carti_pk PRIMARY KEY ( id_carte );

CREATE OR REPLACE FUNCTION get_carti_disponibile RETURN VARCHAR2 IS
    v_message VARCHAR2(3000);
BEGIN
    FOR r IN (
        SELECT
            titlu_carte,
            autor_carte,
            gen_carte
        FROM
            detalii_carte d
        WHERE
            d.carti_id_carte IN (
                SELECT
                    id_carte
                FROM
                    carti
                WHERE
                    status_carte = 'F'
            )
    ) LOOP
        v_message := 'Titlu: '
                     || r.titlu_carte
                     || ', Autor: '
                     || r.autor_carte
                     || ', Gen: '
                     || r.gen_carte;

        dbms_output.put_line(v_message);
    END LOOP;

    RETURN 'Afisare completa.';
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'Eroare: ' || sqlerrm;
END;
/

CREATE OR REPLACE FUNCTION get_carti_dupa_autor (
    p_autor IN VARCHAR2
) RETURN VARCHAR2 IS
    v_message VARCHAR2(3000);
BEGIN
    FOR r IN (
        SELECT
            titlu_carte,
            gen_carte,
            data_publicarii
        FROM
            detalii_carte
        WHERE
            autor_carte = p_autor
    ) LOOP
        v_message := 'Titlu: '
                     || r.titlu_carte
                     || ', Gen: '
                     || r.gen_carte
                     || ', Data Publicarii: '
                     || to_char(r.data_publicarii, 'DD-MON-YYYY');

        dbms_output.put_line(v_message);
    END LOOP;

    RETURN 'Afisare completa.';
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'Eroare: ' || sqlerrm;
END;
/

CREATE OR REPLACE FUNCTION get_carti_dupa_gen (
    p_gen IN VARCHAR2
) RETURN VARCHAR2 IS
    v_message VARCHAR2(3000);
BEGIN
    FOR r IN (
        SELECT
            titlu_carte,
            autor_carte,
            data_publicarii
        FROM
            detalii_carte
        WHERE
            gen_carte = p_gen
    ) LOOP
        v_message := 'Titlu: '
                     || r.titlu_carte
                     || ', Autor: '
                     || r.autor_carte
                     || ', Data Publicarii: '
                     || to_char(r.data_publicarii, 'DD-MON-YYYY');

        dbms_output.put_line(v_message);
    END LOOP;

    RETURN 'Afisare completa';
EXCEPTION
    WHEN OTHERS THEN
        RETURN 'Eroare: ' || sqlerrm;
END;
/

CREATE TABLE bibliotecari (
    id_bibliotecar   INTEGER NOT NULL,
    nume_bibliotecar VARCHAR2(255)
)
LOGGING;

ALTER TABLE bibliotecari ADD CONSTRAINT bibliotecari_pk PRIMARY KEY ( id_bibliotecar );

CREATE TABLE imprumuturi (
    id_imprumut                 INTEGER NOT NULL,
    carti_id_carte              INTEGER NOT NULL,
    membri_id_membru            INTEGER NOT NULL,
    data_imprumut               DATE,
    data_returnare              DATE,
    bibliotecari_id_bibliotecar INTEGER NOT NULL
)
LOGGING;

ALTER TABLE imprumuturi ADD CONSTRAINT imprumuturi_ck_1 CHECK ( data_imprumut < data_returnare );

ALTER TABLE imprumuturi ADD CONSTRAINT imprumuturi_pk PRIMARY KEY ( id_imprumut );

CREATE TABLE membri (
    id_membru   INTEGER NOT NULL,
    nume_membru VARCHAR2(255),
    adresa      VARCHAR2(255),
    telefon     VARCHAR2(10),
    email       VARCHAR2(255),
    cnp_membru  VARCHAR2(13)
)
LOGGING;

ALTER TABLE membri ADD CONSTRAINT membri_pk PRIMARY KEY ( id_membru );

ALTER TABLE membri
    ADD CONSTRAINT mem_tel_email_cnp_membru_un UNIQUE ( telefon,
                                                        email,
                                                        cnp_membru );

ALTER TABLE detalii_carte
    ADD CONSTRAINT detalii_carte_carti_fk FOREIGN KEY ( carti_id_carte )
        REFERENCES carti ( id_carte )
    NOT DEFERRABLE;

ALTER TABLE imprumuturi
    ADD CONSTRAINT imprumuturi_bibliotecari_fk FOREIGN KEY ( bibliotecari_id_bibliotecar )
        REFERENCES bibliotecari ( id_bibliotecar )
    NOT DEFERRABLE;

ALTER TABLE imprumuturi
    ADD CONSTRAINT imprumuturi_carti_fk FOREIGN KEY ( carti_id_carte )
        REFERENCES carti ( id_carte )
    NOT DEFERRABLE;

ALTER TABLE imprumuturi
    ADD CONSTRAINT imprumuturi_membri_fk FOREIGN KEY ( membri_id_membru )
        REFERENCES membri ( id_membru )
    NOT DEFERRABLE;

CREATE OR REPLACE TRIGGER check_return 
    AFTER INSERT OR UPDATE ON Imprumuturi 
    FOR EACH ROW 
DECLARE
    v_titlu_carte VARCHAR2(255);
    v_nume_membru VARCHAR2(255);
    v_zile_intarziere INTEGER;
    v_status_carte CHAR(1);
BEGIN
    SELECT status_carte INTO v_status_carte
    FROM carti
    WHERE id_carte = :NEW.carti_id_carte;
    
    IF v_status_carte = 'T' AND :NEW.data_returnare < SYSDATE AND :NEW.data_returnare IS NOT NULL THEN
       
        SELECT titlu_carte INTO v_titlu_carte
        FROM detalii_carte
        WHERE carti_id_carte = :NEW.carti_id_carte;

        
        SELECT nume_membru INTO v_nume_membru
        FROM membri
        WHERE id_membru = :NEW.membri_id_membru;

        v_zile_intarziere := FLOOR(SYSDATE - :NEW.data_returnare);

        DBMS_OUTPUT.PUT_LINE('Membrul ' || v_nume_membru || ' nu a returnat cartea "' || v_titlu_carte || '" la timp.');
        DBMS_OUTPUT.PUT_LINE('Numar de zile de intarziere: ' || v_zile_intarziere);
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Eroare: Datele nu au fost gasite.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Eroare la verificarea imprumuturilor: ' || SQLERRM);
END; 
/

CREATE OR REPLACE PACKAGE BODY cursor_pkg AS

    PROCEDURE verifica_imprumuturi_si_actualizeaza IS
        CURSOR imprumuturi_cursor IS
        SELECT
            id_imprumut,
            carti_id_carte,
            data_returnare
        FROM
            imprumuturi;

        imprumut_rec imprumuturi_cursor%rowtype;
    BEGIN
        SAVEPOINT cursor_pkg_start;
        OPEN imprumuturi_cursor;
        LOOP
            FETCH imprumuturi_cursor INTO imprumut_rec;
            EXIT WHEN imprumuturi_cursor%notfound;
            IF imprumut_rec.data_returnare < sysdate THEN
                UPDATE carti
                SET
                    status_carte = 'F'
                WHERE
                    id_carte = imprumut_rec.carti_id_carte;

                dbms_output.put_line('Imprumut ID: '
                                     || imprumut_rec.id_imprumut
                                     || ' - Status carte actualizat la: F (disponibil)');
            ELSE
                UPDATE carti
                SET
                    status_carte = 'T'
                WHERE
                    id_carte = imprumut_rec.carti_id_carte;

                dbms_output.put_line('Imprumut ID: '
                                     || imprumut_rec.id_imprumut
                                     || ' - Status carte actualizat la: T (imprumutat)');
            END IF;

        END LOOP;

        CLOSE imprumuturi_cursor;
        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK TO cursor_pkg_start;
            dbms_output.put_line('Eroare la actualizarea statusului cartilor: ' || sqlerrm);
            IF imprumuturi_cursor%isopen THEN
                CLOSE imprumuturi_cursor;
            END IF;
            RAISE;
    END verifica_imprumuturi_si_actualizeaza;

END;
/

CREATE OR REPLACE PACKAGE BODY delete_pkg AS

    PROCEDURE delete_bibliotecar (
        p_id_bibliotecar IN bibliotecari.id_bibliotecar%TYPE,
        p_ok             IN BOOLEAN DEFAULT FALSE
    ) IS
        v_count_imprumuturi INTEGER;
    BEGIN
        SAVEPOINT delete_bibliotecar_start;
        SELECT
            COUNT(*)
        INTO v_count_imprumuturi
        FROM
            imprumuturi
        WHERE
            bibliotecari_id_bibliotecar = p_id_bibliotecar;

        IF
            p_ok = false
            AND v_count_imprumuturi > 0
        THEN
            raise_application_error(-20001, 'Nu se poate sterge bibliotecarul, exista imprumuturi asociate.');
        END IF;

        IF p_ok = true THEN
            DELETE FROM imprumuturi
            WHERE
                bibliotecari_id_bibliotecar = p_id_bibliotecar;

        END IF;
        DELETE FROM bibliotecari
        WHERE
            id_bibliotecar = p_id_bibliotecar;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK TO delete_bibliotecar_start;
            RAISE;
    END delete_bibliotecar;

    PROCEDURE delete_carte (
        p_id_carte IN carti.id_carte%TYPE,
        p_ok       IN BOOLEAN DEFAULT FALSE
    ) IS
        v_count_imprumuturi INTEGER;
        v_count_detalii     INTEGER;
    BEGIN
        SAVEPOINT delete_carte_start;
        SELECT
            COUNT(*)
        INTO v_count_imprumuturi
        FROM
            imprumuturi
        WHERE
            carti_id_carte = p_id_carte;

        SELECT
            COUNT(*)
        INTO v_count_detalii
        FROM
            detalii_carte
        WHERE
            carti_id_carte = p_id_carte;

        IF
            p_ok = false
            AND ( v_count_imprumuturi > 0 OR v_count_detalii > 0 )
        THEN
            raise_application_error(-20002, 'Nu se poate sterge cartea, exista imprumuturi sau detalii asociate.');
        END IF;

        IF p_ok = true THEN
            DELETE FROM imprumuturi
            WHERE
                carti_id_carte = p_id_carte;

            DELETE FROM detalii_carte
            WHERE
                carti_id_carte = p_id_carte;

        END IF;

        DELETE FROM carti
        WHERE
            id_carte = p_id_carte;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK TO delete_carte_start;
            RAISE;
    END delete_carte;

    PROCEDURE delete_detalii_carte (
        p_id_detalii IN detalii_carte.id_detalii%TYPE
    ) IS
    BEGIN
        SAVEPOINT delete_detalii_start;
        DELETE FROM detalii_carte
        WHERE
            id_detalii = p_id_detalii;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK TO sdelete_detalii_start;
            RAISE;
    END delete_detalii_carte;

    PROCEDURE delete_membru (
        p_id_membru IN membri.id_membru%TYPE,
        p_ok        IN BOOLEAN DEFAULT FALSE
    ) IS
        v_count_imprumuturi INTEGER;
    BEGIN
        SAVEPOINT delete_membru_start;
        SELECT
            COUNT(*)
        INTO v_count_imprumuturi
        FROM
            imprumuturi
        WHERE
            membri_id_membru = p_id_membru;

        IF
            p_ok = false
            AND v_count_imprumuturi > 0
        THEN
            raise_application_error(-20003, 'Nu se poate sterge membrul, exista imprumuturi asociate.');
        END IF;

        IF p_ok = true THEN
            DELETE FROM imprumuturi
            WHERE
                membri_id_membru = p_id_membru;

        END IF;
        DELETE FROM membri
        WHERE
            id_membru = p_id_membru;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK TO delete_membru_start;
            RAISE;
    END delete_membru;

    PROCEDURE delete_imprumut (
        p_id_imprumut IN imprumuturi.id_imprumut%TYPE
    ) IS
    BEGIN
        SAVEPOINT delete_imprumut_start;
        DELETE FROM imprumuturi
        WHERE
            id_imprumut = p_id_imprumut;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK TO delete_imprumut_start;
            RAISE;
    END delete_imprumut;

END;
/

CREATE OR REPLACE PACKAGE BODY insert_pkg AS

    FUNCTION adauga_carte (
        p_id_carte     IN INTEGER,
        p_status_carte IN CHAR
    ) RETURN VARCHAR2 IS
    BEGIN
        SAVEPOINT adauga_carte_start;
        INSERT INTO carti (
            id_carte,
            status_carte
        ) VALUES (
            p_id_carte,
            p_status_carte
        );

        COMMIT;
        RETURN 'Carte adaugata cu succes';
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK TO adauga_carte_start;
            RETURN 'Eroare la adaugarea cartii: ' || sqlerrm;
    END adauga_carte;

    FUNCTION adauga_detalii_carte (
        p_id_detalii      IN INTEGER,
        p_carti_id_carte  IN INTEGER,
        p_titlu_carte     IN VARCHAR2,
        p_autor_carte     IN VARCHAR2,
        p_gen_carte       IN VARCHAR2,
        p_data_publicarii IN DATE
    ) RETURN VARCHAR2 IS
        v_exists INTEGER;
    BEGIN
        SAVEPOINT adauga_detalii_carte_start;
        SELECT
            COUNT(*)
        INTO v_exists
        FROM
            carti
        WHERE
            id_carte = p_carti_id_carte;

        IF v_exists = 0 THEN
            RETURN 'Eroare: Carte cu id-ul specificat nu exista';
        END IF;
        INSERT INTO detalii_carte (
            id_detalii,
            carti_id_carte,
            titlu_carte,
            autor_carte,
            gen_carte,
            data_publicarii
        ) VALUES (
            p_id_detalii,
            p_carti_id_carte,
            p_titlu_carte,
            p_autor_carte,
            p_gen_carte,
            p_data_publicarii
        );

        COMMIT;
        RETURN 'Detalii carte adaugate cu succes';
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK TO adauga_detalii_carte_start;
            RETURN 'Eroare la adaugarea detaliilor cartii: ' || sqlerrm;
    END adauga_detalii_carte;

    FUNCTION adauga_membru (
        p_id_membru   IN INTEGER,
        p_nume_membru IN VARCHAR2,
        p_adresa      IN VARCHAR2,
        p_telefon     IN VARCHAR2,
        p_email       IN VARCHAR2,
        p_cnp_membru  IN VARCHAR2
    ) RETURN VARCHAR2 IS
    BEGIN
        SAVEPOINT adauga_membru_start;
        INSERT INTO membri (
            id_membru,
            nume_membru,
            adresa,
            telefon,
            email,
            cnp_membru
        ) VALUES (
            p_id_membru,
            p_nume_membru,
            p_adresa,
            p_telefon,
            p_email,
            p_cnp_membru
        );

        COMMIT;
        RETURN 'Membru adaugat cu succes';
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK TO adauga_membru_start;
            RETURN 'Eroare la adaugarea membrului: ' || sqlerrm;
    END adauga_membru;

    FUNCTION adauga_bibliotecar (
        p_id_bibliotecar   IN INTEGER,
        p_nume_bibliotecar IN VARCHAR2
    ) RETURN VARCHAR2 IS
    BEGIN
        SAVEPOINT adauga_bibliotecar_start;
        INSERT INTO bibliotecari (
            id_bibliotecar,
            nume_bibliotecar
        ) VALUES (
            p_id_bibliotecar,
            p_nume_bibliotecar
        );

        COMMIT;
        RETURN 'Bibliotecar adaugat cu succes';
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK TO adauga_bibliotecar_start;
            RETURN 'Eroare la adaugarea bibliotecarului: ' || sqlerrm;
    END adauga_bibliotecar;

    FUNCTION adauga_imprumut (
        p_id_imprumut                 IN INTEGER,
        p_carti_id_carte              IN INTEGER,
        p_membri_id_membru            IN INTEGER,
        p_data_imprumut               IN DATE,
        p_data_returnare              IN DATE,
        p_bibliotecari_id_bibliotecar IN INTEGER
    ) RETURN VARCHAR2 IS
        v_exists INTEGER;
    BEGIN
        SAVEPOINT adauga_imprumut_start;
        SELECT
            COUNT(*)
        INTO v_exists
        FROM
            carti
        WHERE
            id_carte = p_carti_id_carte;

        IF v_exists = 0 THEN
            RETURN 'Eroare: Carte cu id-ul specificat nu exista';
        END IF;
        SELECT
            COUNT(*)
        INTO v_exists
        FROM
            membri
        WHERE
            id_membru = p_membri_id_membru;

        IF v_exists = 0 THEN
            RETURN 'Eroare: Membru cu id-ul specificat nu exista';
        END IF;
        SELECT
            COUNT(*)
        INTO v_exists
        FROM
            bibliotecari
        WHERE
            id_bibliotecar = p_bibliotecari_id_bibliotecar;

        IF v_exists = 0 THEN
            RETURN 'Eroare: Bibliotecar cu id-ul specificat nu exista';
        END IF;
        INSERT INTO imprumuturi (
            id_imprumut,
            carti_id_carte,
            membri_id_membru,
            data_imprumut,
            data_returnare,
            bibliotecari_id_bibliotecar
        ) VALUES (
            p_id_imprumut,
            p_carti_id_carte,
            p_membri_id_membru,
            p_data_imprumut,
            p_data_returnare,
            p_bibliotecari_id_bibliotecar
        );

        COMMIT;
        RETURN 'Imprumut adaugat cu succes';
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK TO adauga_imprumut_start;
            RETURN 'Eroare la adaugarea imprumutului: ' || sqlerrm;
    END adauga_imprumut;

END;
/

CREATE OR REPLACE PACKAGE BODY update_pkg AS

    PROCEDURE update_bibliotecar (
        p_id_bibliotecar   IN bibliotecari.id_bibliotecar%TYPE,
        p_nume_bibliotecar IN bibliotecari.nume_bibliotecar%TYPE
    ) IS
    BEGIN
        SAVEPOINT update_bibliotecar_start;
        UPDATE bibliotecari
        SET
            nume_bibliotecar = p_nume_bibliotecar
        WHERE
            id_bibliotecar = p_id_bibliotecar;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK TO update_bibliotecar_start;
            dbms_output.put_line('Eroare la actualizarea bibliotecarului: ' || sqlerrm);
    END update_bibliotecar;

    PROCEDURE update_carte (
        p_id_carte     IN carti.id_carte%TYPE,
        p_status_carte IN carti.status_carte%TYPE
    ) IS
    BEGIN
        SAVEPOINT update_carte_start;
        UPDATE carti
        SET
            status_carte = p_status_carte
        WHERE
            id_carte = p_id_carte;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK TO update_carte_start;
            dbms_output.put_line('Eroare la actualizarea cartii: ' || sqlerrm);
    END update_carte;

    PROCEDURE update_detalii_carte (
        p_id_detalii      IN detalii_carte.id_detalii%TYPE,
        p_titlu_carte     IN detalii_carte.titlu_carte%TYPE,
        p_autor_carte     IN detalii_carte.autor_carte%TYPE,
        p_gen_carte       IN detalii_carte.gen_carte%TYPE,
        p_data_publicarii IN detalii_carte.data_publicarii%TYPE
    ) IS
    BEGIN
        SAVEPOINT update_detalii_carte_start;
        UPDATE detalii_carte
        SET
            titlu_carte = p_titlu_carte,
            autor_carte = p_autor_carte,
            gen_carte = p_gen_carte,
            data_publicarii = p_data_publicarii
        WHERE
            id_detalii = p_id_detalii;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK TO update_detalii_carte_start;
            dbms_output.put_line('Eroare la actualizarea detaliilor cartii: ' || sqlerrm);
    END update_detalii_carte;

    PROCEDURE update_membru (
        p_id_membru   IN membri.id_membru%TYPE,
        p_nume_membru IN membri.nume_membru%TYPE,
        p_adresa      IN membri.adresa%TYPE,
        p_telefon     IN membri.telefon%TYPE,
        p_email       IN membri.email%TYPE,
        p_cnp_membru  IN membri.cnp_membru%TYPE
    ) IS
    BEGIN
        SAVEPOINT update_membru_start;
        UPDATE membri
        SET
            nume_membru = p_nume_membru,
            adresa = p_adresa,
            telefon = p_telefon,
            email = p_email,
            cnp_membru = p_cnp_membru
        WHERE
            id_membru = p_id_membru;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK TO update_membru_start;
            dbms_output.put_line('Eroare la actualizarea membrului: ' || sqlerrm);
    END update_membru;

    PROCEDURE update_imprumut (
        p_id_imprumut                 IN imprumuturi.id_imprumut%TYPE,
        p_carti_id_carte              IN imprumuturi.carti_id_carte%TYPE,
        p_membri_id_membru            IN imprumuturi.membri_id_membru%TYPE,
        p_data_imprumut               IN imprumuturi.data_imprumut%TYPE,
        p_data_returnare              IN imprumuturi.data_returnare%TYPE,
        p_bibliotecari_id_bibliotecar IN imprumuturi.bibliotecari_id_bibliotecar%TYPE
    ) IS
    BEGIN
        SAVEPOINT update_imprumut_start;
        UPDATE imprumuturi
        SET
            carti_id_carte = p_carti_id_carte,
            membri_id_membru = p_membri_id_membru,
            data_imprumut = p_data_imprumut,
            data_returnare = p_data_returnare,
            bibliotecari_id_bibliotecar = p_bibliotecari_id_bibliotecar
        WHERE
            id_imprumut = p_id_imprumut;

        COMMIT;
    EXCEPTION
        WHEN OTHERS THEN
            ROLLBACK TO update_imprumut_start;
            dbms_output.put_line('Eroare la actualizarea imprumutului: ' || sqlerrm);
    END update_imprumut;

END;
/

CREATE OR REPLACE PACKAGE BODY view_pkg AS

    PROCEDURE view_imprumuturi_by_membru (
        p_id_membru IN membri.id_membru%TYPE
    ) IS
    BEGIN
        FOR r IN (
            SELECT
                i.id_imprumut,
                i.carti_id_carte,
                i.membri_id_membru,
                i.data_imprumut,
                i.data_returnare,
                i.bibliotecari_id_bibliotecar,
                c.titlu_carte,
                c.autor_carte,
                c.gen_carte,
                c.data_publicarii
            FROM
                imprumuturi   i,
                detalii_carte c
            WHERE
                    i.carti_id_carte = c.carti_id_carte
                AND i.membri_id_membru = p_id_membru
        ) LOOP
            dbms_output.put_line('Imprumut ID: '
                                 || r.id_imprumut
                                 || ', Carte ID: '
                                 || r.carti_id_carte
                                 || ', Titlu: '
                                 || r.titlu_carte
                                 || ', Autor: '
                                 || r.autor_carte
                                 || ', Data Imprumut: '
                                 || r.data_imprumut
                                 || ', Data Returnare: '
                                 || r.data_returnare
                                 || ', Bibliotecar ID: '
                                 || r.bibliotecari_id_bibliotecar);
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Eroare la vizualizarea imprumuturilor pentru membru: ' || sqlerrm);
    END view_imprumuturi_by_membru;

    PROCEDURE view_imprumuturi_by_carte (
        p_id_carte IN carti.id_carte%TYPE
    ) IS
    BEGIN
        FOR r IN (
            SELECT
                i.id_imprumut,
                i.carti_id_carte,
                i.membri_id_membru,
                i.data_imprumut,
                i.data_returnare,
                i.bibliotecari_id_bibliotecar,
                m.nume_membru,
                m.adresa,
                m.telefon,
                m.email,
                m.cnp_membru
            FROM
                imprumuturi i,
                membri      m
            WHERE
                    i.membri_id_membru = m.id_membru
                AND i.carti_id_carte = p_id_carte
        ) LOOP
            dbms_output.put_line('Imprumut ID: '
                                 || r.id_imprumut
                                 || ', Carte ID: '
                                 || r.carti_id_carte
                                 || ', Membru: '
                                 || r.nume_membru
                                 || ', Adresa: '
                                 || r.adresa
                                 || ', Data Imprumut: '
                                 || r.data_imprumut
                                 || ', Data Returnare: '
                                 || r.data_returnare
                                 || ', Bibliotecar ID: '
                                 || r.bibliotecari_id_bibliotecar);
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Eroare la vizualizarea imprumuturilor pentru carte: ' || sqlerrm);
    END view_imprumuturi_by_carte;

    PROCEDURE view_detalii_carte_by_carte (
        p_id_carte IN carti.id_carte%TYPE
    ) IS
    BEGIN
        FOR r IN (
            SELECT
                d.id_detalii,
                d.carti_id_carte,
                d.titlu_carte,
                d.autor_carte,
                d.gen_carte,
                d.data_publicarii
            FROM
                detalii_carte d
            WHERE
                d.carti_id_carte = p_id_carte
        ) LOOP
            dbms_output.put_line('Detalii Carte ID: '
                                 || r.id_detalii
                                 || ', Carte ID: '
                                 || r.carti_id_carte
                                 || ', Titlu: '
                                 || r.titlu_carte
                                 || ', Autor: '
                                 || r.autor_carte
                                 || ', Gen: '
                                 || r.gen_carte
                                 || ', Data Publicarii: '
                                 || r.data_publicarii);
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Eroare la vizualizarea detaliilor pentru carte: ' || sqlerrm);
    END view_detalii_carte_by_carte;

    PROCEDURE view_imprumuturi_by_bibliotecar (
        p_id_bibliotecar IN bibliotecari.id_bibliotecar%TYPE
    ) IS
    BEGIN
        FOR r IN (
            SELECT
                i.id_imprumut,
                i.carti_id_carte,
                i.membri_id_membru,
                i.data_imprumut,
                i.data_returnare,
                i.bibliotecari_id_bibliotecar,
                m.nume_membru,
                m.adresa,
                m.telefon,
                m.email,
                m.cnp_membru,
                d.titlu_carte,
                d.autor_carte,
                d.gen_carte,
                d.data_publicarii
            FROM
                imprumuturi   i,
                membri        m,
                detalii_carte d
            WHERE
                    i.membri_id_membru = m.id_membru
                AND i.carti_id_carte = d.carti_id_carte
                AND i.bibliotecari_id_bibliotecar = p_id_bibliotecar
        ) LOOP
            dbms_output.put_line('Imprumut ID: '
                                 || r.id_imprumut
                                 || ', Carte ID: '
                                 || r.carti_id_carte
                                 || ', Membru: '
                                 || r.nume_membru
                                 || ', Adresa: '
                                 || r.adresa
                                 || ', Titlu: '
                                 || r.titlu_carte
                                 || ', Autor: '
                                 || r.autor_carte
                                 || ', Data Imprumut: '
                                 || r.data_imprumut
                                 || ', Data Returnare: '
                                 || r.data_returnare
                                 || ', Bibliotecar ID: '
                                 || r.bibliotecari_id_bibliotecar);
        END LOOP;
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('Eroare la vizualizarea imprumuturilor pentru bibliotecar: ' || sqlerrm);
    END view_imprumuturi_by_bibliotecar;

END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                             5
-- CREATE INDEX                             1
-- ALTER TABLE                             11
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           5
-- CREATE PACKAGE BODY                      5
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          3
-- CREATE TRIGGER                           1
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
